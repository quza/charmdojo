/**
 * OpenAI API Client
 * Handles GPT-4 Vision for girl descriptions and other OpenAI services
 */

import OpenAI from 'openai';
import { GirlAttributes } from '@/types/game';
import fs from 'fs';
import path from 'path';
import { withRetry } from '@/lib/utils/retry';

// Lazy initialization of OpenAI client
let openaiClient: OpenAI | null = null;

function getOpenAIClient(): OpenAI {
  if (!openaiClient) {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY environment variable is not set');
    }
    openaiClient = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
      organization: process.env.OPENAI_ORG_ID,
    });
  }
  return openaiClient;
}

/**
 * Load girl description prompt template
 */
function loadDescriptionPrompt(): string {
  const promptPath = path.join(process.cwd(), 'src/prompts/girl_description_prompt.md');
  return fs.readFileSync(promptPath, 'utf-8');
}

/**
 * Generate detailed physical description using GPT-4 Vision
 * Includes automatic retry logic for transient failures
 * @param imageUrl - URL of the girl's image
 * @param timeout - Timeout in milliseconds (default: 30000)
 * @returns Detailed physical description (150-300 words)
 */
export async function generateGirlDescription(
  imageUrl: string,
  timeout: number = 30000
): Promise<string> {
  return withRetry(
    async () => {
      const openai = getOpenAIClient();
      const promptTemplate = loadDescriptionPrompt();
      
      // Create abort controller for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      try {
        // Call GPT-4 Vision API
        const response = await openai.chat.completions.create(
          {
            model: 'gpt-4-turbo',
            messages: [
              {
                role: 'system',
                content: 'You are an expert at analyzing images and providing detailed physical descriptions for image generation purposes.',
              },
              {
                role: 'user',
                content: [
                  {
                    type: 'text',
                    text: promptTemplate,
                  },
                  {
                    type: 'image_url',
                    image_url: {
                      url: imageUrl,
                      detail: 'high',
                    },
                  },
                ],
              },
            ],
            max_tokens: 500,
            temperature: 0.7,
          },
          {
            signal: controller.signal as any,
          }
        );

        clearTimeout(timeoutId);

        const description = response.choices[0]?.message?.content?.trim();

        if (!description) {
          throw new Error('Empty response from Vision API');
        }

        // Validate the description
        if (!validateDescription(description)) {
          throw new Error('Invalid description generated by Vision API');
        }

        return description;
      } catch (error: any) {
        clearTimeout(timeoutId);
        
        if (error.name === 'AbortError') {
          throw new Error('Vision API timeout exceeded (30 seconds)');
        }

        // Re-throw for retry logic or fallback handler
        throw error;
      }
    },
    {
      maxAttempts: 3,
      initialDelay: 500,
      maxDelay: 2000,
      backoffMultiplier: 2,
      onRetry: (error, attempt) => {
        console.warn(`ðŸ”„ OpenAI Vision retry attempt ${attempt}: ${error.message}`);
      }
    }
  );
}

/**
 * Validate generated description meets requirements
 * @param description - Generated description text
 * @returns True if valid, false otherwise
 */
export function validateDescription(description: string): boolean {
  // Check minimum word count (approximately 100 words)
  const wordCount = description.split(/\s+/).length;
  if (wordCount < 100) {
    console.warn(`Description too short: ${wordCount} words`);
    return false;
  }

  // Check maximum word count (approximately 400 words)
  if (wordCount > 400) {
    console.warn(`Description too long: ${wordCount} words`);
    return false;
  }

  // Check for key physical features
  const requiredKeywords = ['hair', 'eye', 'face'];
  const hasRequiredFeatures = requiredKeywords.some(keyword =>
    description.toLowerCase().includes(keyword)
  );

  if (!hasRequiredFeatures) {
    console.warn('Description missing key physical features');
    return false;
  }

  // Check for explicitly inappropriate content keywords
  // Note: "sexual" and "sensual" removed - these can appear in legitimate descriptions
  // of attractive features in a dating context
  const inappropriateKeywords = [
    'nude',
    'naked',
    'explicit',
    'nsfw',
    'porn',
    'genitals',
    'nipples',
    'topless',
  ];
  const hasInappropriateContent = inappropriateKeywords.some(keyword =>
    description.toLowerCase().includes(keyword)
  );

  if (hasInappropriateContent) {
    const matchedKeyword = inappropriateKeywords.find(keyword =>
      description.toLowerCase().includes(keyword)
    );
    console.warn(`Description contains inappropriate content: matched keyword "${matchedKeyword}"`);
    return false;
  }

  return true;
}

/**
 * Generate fallback description from attributes when Vision API fails
 * @param attributes - Girl's physical attributes
 * @returns Template-based detailed description
 */
export function generateFallbackDescription(attributes: GirlAttributes): string {
  const { ethnicity, hairColor, eyeColor, bodyType, hairstyle, setting } = attributes;

  // Varied description templates to avoid repetition
  const templates = [
    `An attractive ${ethnicity} woman with ${hairstyle} ${hairColor} hair that frames her face beautifully. Her ${eyeColor} eyes are captivating and expressive, drawing attention with their natural warmth. She has a ${bodyType} build with graceful proportions and confident posture. Her facial features include well-defined cheekbones, a delicate nose, and full lips that complement her overall appearance. Her skin has a healthy, natural glow with a smooth complexion. The ${hairColor} tones in her hair catch the light naturally, adding depth and dimension. Her ${eyeColor} eyes are framed by naturally arched brows, and her gaze is both inviting and self-assured. She carries herself with natural elegance and poise, reflecting both confidence and approachability. Her overall appearance is polished yet natural, with balanced facial proportions that create a harmonious and memorable look.`,
    
    `A ${bodyType} ${ethnicity} woman with striking ${hairstyle} ${hairColor} hair flowing naturally. Her ${eyeColor} eyes stand out as one of her most distinctive features, bright and full of expression. Her facial structure shows elegant bone structure with a defined jawline and high cheekbones that give her face a naturally sculpted appearance. She has a ${bodyType} physique with well-proportioned features. Her ${hairColor} hair has a rich, lustrous quality with natural movement and body. The ${hairstyle} style suits her face shape perfectly, enhancing her natural beauty. Her ${eyeColor} eyes are almond-shaped with an intelligent, warm gaze. Her complexion is smooth and even-toned, reflecting good health. She has naturally full lips and a straight, refined nose. Her overall aesthetic combines natural beauty with a polished, put-together appearance. There's an inherent confidence in her bearing that comes through in her features.`,
    
    `This ${ethnicity} woman possesses ${hairstyle} ${hairColor} hair that's one of her standout features, with natural shine and healthy appearance. Her ${eyeColor} eyes are particularly expressive, conveying warmth and intelligence. She has a ${bodyType} frame with balanced proportions and an athletic grace. Her facial features are harmonious, with symmetrical placement and pleasing proportions. The ${hairColor} hue of her hair provides a beautiful contrast to her ${eyeColor} eyes, creating a striking overall look. Her cheekbones are naturally defined, giving her face elegant structure. She has smooth skin with an even complexion and healthy glow. Her lips are well-shaped and naturally full. The ${hairstyle} arrangement of her hair flatters her face shape and highlights her best features. Her eyebrows frame her ${eyeColor} eyes naturally, adding to her expressive appearance. She radiates natural confidence and approachability through her features and overall presentation.`,
  ];

  // Select template based on a simple hash of the attributes
  const hash = (ethnicity + hairColor + eyeColor).length;
  const template = templates[hash % templates.length];

  return template;
}

/**
 * Generate girl description with automatic fallback
 * Main entry point that handles Vision API call with fallback to template
 * @param imageUrl - URL of the girl's image
 * @param attributes - Girl's attributes for fallback
 * @returns Description string (150-300 words)
 */
export async function generateGirlDescriptionWithFallback(
  imageUrl: string,
  attributes: GirlAttributes
): Promise<{ description: string; usedFallback: boolean }> {
  try {
    // Add a small delay to allow CDN propagation for newly uploaded images
    // This prevents OpenAI from trying to fetch before the image is available
    await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay
    
    // Attempt Vision API first
    const description = await generateGirlDescription(imageUrl);
    console.log('âœ“ Vision API description generated successfully');
    return { description, usedFallback: false };
  } catch (error) {
    console.error('Vision API failed, using fallback description:', error);
    
    // Use template-based fallback
    const description = generateFallbackDescription(attributes);
    console.log('âœ“ Fallback description generated from attributes');
    return { description, usedFallback: true };
  }
}

