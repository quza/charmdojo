---
alwaysApply: false
---
# PRP Methodology - Cursor Global Rule

This file provides guidance to Cursor Agents when working with code in this repository.

## Project Nature

This is a **PRP (Product Requirement Prompt) Framework** repository, not a traditional software project. The core concept: **"PRP = PRD + curated codebase intelligence + agent/runbook"** - designed to enable AI agents to ship production-ready code on the first pass.

### Document Hierarchy

Understanding how documents relate to each other:

1. **PRD** (Product Requirements Document)
   - High-level product vision, user stories, business requirements
   - Defines WHAT to build and WHY

2. **Implementation Plan**
   - Breaks PRD into phases, milestones, and PRPs
   - Defines execution order and dependencies

3. **PRPs** (Product Requirement Prompts)
   - Individual, executable implementation units
   - Detailed instructions for specific features

**Flow:** PRD → Implementation Plan → PRP-001, PRP-002, PRP-003...

## Core Architecture

### Command-Driven System

- **pre-configured Cursor commands** in `.cursor/commands/`
- Commands organized by function:
  - `PRPs/` - PRP creation and execution workflows
  - `development/` - Core development utilities (prime-core, onboarding, debug)
  - `code-quality/` - Review and refactoring commands
  - `rapid-development/experimental/` - Parallel PRP creation and hackathon tools
  - `git-operations/` - Conflict resolution and smart git operations

### Template-Based Methodology

- **PRP Templates** in `PRPs/templates/` follow structured format with validation loops
- **Context-Rich Approach**: Every PRP must include comprehensive documentation, examples, and gotchas
- **Validation-First Design**: Each PRP contains executable validation gates (syntax, tests, integration)

### AI Documentation Curation

- `PRPs/ai_docs/` contains curated Cursor documentation for context injection
  - `project-structure.md` - Canonical folder structure and file placement rules (living document, update when adding new directories or architectural changes)
- `.cursor/rules` provides framework-specific PRP guidance and global methodology

## Development Commands

See each PRP’s **Validation Loop** and `PRPs/ai_docs/ci.md` (if present) for the exact commands to run locally or in CI.

### Key Cursor Commands

- `/prp-base-create` — Generate comprehensive PRPs with research.
- `/prp-base-execute` — Execute PRPs against the codebase.
- `/prp-planning-create` — Create planning documents with diagrams.
- `/prp-spec-create` — Create specification PRPs for transformations.
- `/prp-spec-execute` — Execute specification PRPs.
- `/review-staged-unstaged` — Review git changes using PRP methodology.
- `/create-pr` — Create a pull request with a proper template.
- `/prime-core` — Prime the agent with project context.

## Critical Success Patterns

### The PRP Methodology

1. **Context is King**: Include ALL necessary documentation, examples, and caveats
2. **Validation Loops**: Provide executable tests/lints the AI can run and fix
3. **Information Dense**: Use keywords and patterns from the codebase
4. **Progressive Success**: Start simple, validate, then enhance

### PRP Structure Requirements

- **Goal**: Specific end state and desires
- **Why**: Business value and user impact
- **What**: User-visible behavior and technical requirements
- **All Needed Context**: Documentation URLs, code examples, gotchas, patterns
- **Implementation Blueprint**: Pseudocode with critical details and task lists
- **Validation Loop**: Executable commands for syntax, tests, integration

### Validation Gates (Must be Executable)

```bash
# Level 1: Syntax & Style
npm run lint
npm run typecheck

# Level 2: Unit Tests
npm test

# Level 3: Integration / E2E (optional)
# npx playwright test  OR  npx cypress run

# Level 4: Build / Preview
npm run build
```
For CI details, see `PRPs/ai_docs/ci.md`.

## Anti-Patterns to Avoid

- ❌ Don't create minimal context prompts - context is everything - the PRP must be comprehensive and self-contained, reference relevant documentation and examples.
- ❌ Don't skip validation steps - they're critical for one-pass success - The better The AI is at running the validation loop, the more likely it is to succeed.
- ❌ Don't ignore the structured PRP format - it's battle-tested
- ❌ Don't create new patterns when existing templates work
- ❌ Don't hardcode values that should be config
- ❌ Don't catch all exceptions - be specific
- ❌ Don't place files without checking `PRPs/ai_docs/project-structure.md` first
- ❌ Don't add new directories without updating `project-structure.md` afterward

## Working with This Framework

### When Creating new PRPs

1. **Context Process**: New PRPs must consist of context sections, Context is King!

### When Executing PRPs

1. **Load PRP**: Read and understand all context and requirements
2. **Reference Structure**: Check `PRPs/ai_docs/project-structure.md` for file placement
3. **ULTRATHINK - Deep Planning Step**: Create comprehensive plan, break down into todos, use subagents, batch tool etc check prps/ai_docs/
4. **Execute**: Implement following the blueprint
5. **Validate**: Run each validation command, fix failures
6. **Complete**: Ensure all checklist items done
7. **Update Structure Doc**: If you created new directories or architectural patterns, update `PRPs/ai_docs/project-structure.md`

### Command Usage

- Read the `.cursor/commands` directory
- Access via `/` prefix in Cursor
- Commands are self-documenting with argument placeholders
- Use parallel creation commands for rapid development
- Leverage existing review and refactoring commands

## Project Structure Understanding

For detailed information about where to place application code (components, API routes, services, etc.), see `PRPs/ai_docs/project-structure.md` - if file exists and is not empty.

**Key separation:**
- This rule file (prp.mdc) → Explains the PRP framework itself
- project-structure.md → Explains where application code goes

Remember: This framework is about **one-pass implementation success through comprehensive context and validation**. Every PRP should contain the exact context for an AI agent to successfully implement working code in a single pass.